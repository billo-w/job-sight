name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ./
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Security scan (Bandit)
        run: bandit -r app.py
      - name: Build image
        run: docker build -t job-sight:latest .
      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: job-sight:latest
      - name: Run tests with coverage
        run: |
          pytest --maxfail=1 --disable-warnings --cov=app --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
      - name : Upload Docker image to DigitalOcean Container Registry
        uses: docker/login-action@v2
        with:
          registry: registry.digitalocean.com
          username: doctl
          password: ${{ secrets.DO_TOKEN }}
      - name: Push Docker image
        run: |
          docker tag job-sight:latest registry.digitalocean.com/job-sight-app/job-sight:latest
          docker push registry.digitalocean.com/job-sight-app/job-sight:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      # DO App Platform vars
      TF_VAR_do_token:       ${{ secrets.DO_TOKEN }}
      TF_VAR_github_repo:    ${{ github.repository }}
      TF_VAR_adzuna_id:      ${{ secrets.ADZUNA_ID }}
      TF_VAR_adzuna_key:     ${{ secrets.ADZUNA_KEY }}
      TF_VAR_foundry_endpoint: ${{ secrets.FOUNDRY_ENDPOINT }}
      TF_VAR_foundry_key:      ${{ secrets.FOUNDRY_KEY }}
      TF_VAR_logtail_source_token: ${{ secrets.LOGTAIL_SOURCE_TOKEN }}
      TF_VAR_existing_database_url: ${{ secrets.DATABASE_URL }}

      AWS_ACCESS_KEY_ID:     ${{ secrets.SPACES_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_KEY }}

    steps:
      - uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.6.3'

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -reconfigure

      - name: Terraform Plan & Apply
        working-directory: terraform
        run: |
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan